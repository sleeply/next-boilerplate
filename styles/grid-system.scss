@import "@/styles/mixins.scss";

$gutter-width: 1rem;
$gutter-compensation: ($gutter-width * 0.5) * -1;
$half-gutter-width: $gutter-width * 0.5;

$columns: 12;

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return calc($number / ($number * 0 + 1px));
  }

  @return $number;
}

.container {
  margin-right: auto;
  margin-left: auto;
  width: 100%;
  max-width: $xxl;
  padding-left: $gutter-width * 2;
  padding-right: $gutter-width * 2;
  @include media(sm) {
    padding-right: $gutter-width;
    padding-left: $gutter-width;
  }
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

[class^="col-"] {
  box-sizing: border-box;
  flex: 0 0 auto;
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

@mixin generateColumnWidths($className) {
  @for $i from 1 through $columns {
    .col-#{$className}-#{$i} {
      flex-basis: calc($i / $columns * 100%);
      max-width: calc($i / $columns * 100%);
    }
  }
}

@mixin generateOffset($className) {
  @for $i from 1 through $columns {
    .col-#{$className}-offset-#{$i} {
      margin-left: calc($i / $columns * 100%);
    }
  }
}

@mixin helperClasses($className) {
  .col-#{$className} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .start-#{$className} {
    justify-content: flex-start;
    text-align: start;
  }

  .center-#{$className} {
    justify-content: flex-start;
    text-align: start;
  }

  .end-#{$className} {
    justify-content: flex-end;
    text-align: end;
  }

  .top-#{$className} {
    align-items: flex-start;
  }

  .middle-#{$className} {
    align-items: center;
  }

  .bottom-#{$className} {
    align-items: flex-end;
  }

  .around-#{$className} {
    justify-content: space-around;
  }

  .between-#{$className} {
    justify-content: space-between;
  }

  .first-#{$className} {
    order: -1;
  }

  .last-#{$className} {
    order: 1;
  }
}

@mixin makeGrid($sizes...) {
  @each $classname, $width in keywords($sizes) {
    $minwidth: strip-unit($width);
    @if $width {
      @media screen and (min-width: #{$minwidth}px) {
        @include generateColumnWidths($classname);
        @include generateOffset($classname);
        @include helperClasses($classname);
      }
    } @else {
      @include generateColumnWidths($classname);
      @include generateOffset($classname);
      @include helperClasses($classname);
    }
  }
}

@include makeGrid(
  $xs: null,
  $sm: $sm,
  $md: $md,
  $lg: $lg,
  $xl: $xl,
  $xxl: $xxl
);
